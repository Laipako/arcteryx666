import streamlit as st
import pandas as pd
import time
from inventory_check import (
    safe_batch_query,
    calculate_enhanced_inventory_stats,
    calculate_product_depth_stats,
    calculate_key_store_analysis,
    STORE_REGION_MAPPING
)
from filter_utils import apply_filters_and_sort, convert_to_excel
from favorites_manager import load_favorites
from purchase_plan_manager import add_to_plan, check_product_in_plan
from followed_stores_manager import get_followed_store_names
from calculation_utils import convert_krw_to_cny


def show_inventory_matrix_tab():
    """ÊòæÁ§∫Â∫ìÂ≠òÁü©ÈòµÊ†áÁ≠æÈ°µ"""
    st.header("üìä Â∫ìÂ≠òÁü©Èòµ")

    # ÂàùÂßãÂåñsession_state
    if "inventory_matrix_queried" not in st.session_state:
        st.session_state.inventory_matrix_queried = False
    if "inventory_matrix_data" not in st.session_state:
        st.session_state.inventory_matrix_data = None
    if "stock_filter_matrix" not in st.session_state:
        st.session_state.stock_filter_matrix = "ÂÖ®ÈÉ®"
    if "region_filter_matrix" not in st.session_state:
        st.session_state.region_filter_matrix = "ÂÖ®ÈÉ®"
    if "sort_option_matrix" not in st.session_state:
        st.session_state.sort_option_matrix = "ÈªòËÆ§"
    if "query_stats" not in st.session_state:
        st.session_state.query_stats = None

    # Âä†ËΩΩÊî∂Ëóè‰∫ßÂìÅÂàóË°®
    favorites = load_favorites()

    if not favorites:
        st.info("üìå ÊèêÁ§∫ÔºöÊöÇÊó†Êî∂Ëóè‰∫ßÂìÅ„ÄÇËØ∑ÂÖàÂú®„ÄêÊî∂Ëóè‰∫ßÂìÅ„ÄëÊ†áÁ≠æÈ°µÊ∑ªÂä†Êî∂Ëóè‰∫ßÂìÅ„ÄÇ")
        return

    st.subheader("üìä Â∫ìÂ≠òÁü©ÈòµÊü•ËØ¢")
    
    # Êü•ËØ¢ÊåâÈíÆ
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üîç Êü•ÂÖ®ÈÉ®Â∫ìÂ≠ò", key="matrix_check_all", use_container_width=True):
            if not favorites:
                st.warning("Êî∂ËóèÂàóË°®‰∏∫Á©∫")
            else:
                # ÊòæÁ§∫Êü•ËØ¢ËøõÂ∫¶
                progress_text = st.empty()
                progress_text.info(f"ÂºÄÂßãÊü•ËØ¢ÊâÄÊúâ {len(favorites)} ‰∏™‰∫ßÂìÅÁöÑÂ∫ìÂ≠ò...")

                # ÂÆûÈôÖÊâßË°åÊü•ËØ¢ÔºàÊü•ËØ¢ÊâÄÊúâÊî∂Ëóè‰∫ßÂìÅÔºâ
                inventory_matrix, query_stats = safe_batch_query(favorites)

                if inventory_matrix:
                    st.session_state.inventory_matrix_queried = True
                    st.session_state.inventory_matrix_data = inventory_matrix
                    st.session_state.query_stats = query_stats
                    
                    # ÊòæÁ§∫ÊàêÂäü/Â§±Ë¥•ÁªüËÆ°
                    success_count = query_stats.get("success", 0)
                    failed_count = query_stats.get("failed", 0)
                    success_rate = query_stats.get("success_rate", 0)
                    duration = query_stats.get("duration", 0)
                    
                    progress_text.success(
                        f"Êü•ËØ¢ÂÆåÊàêÔºÅÊàêÂäü: {success_count}‰∏™ ‚úÖ | Â§±Ë¥•: {failed_count}‰∏™ ‚ùå | "
                        f"ÊàêÂäüÁéá: {success_rate}% | ËÄóÊó∂: {duration}Áßí | ÂÖ± {len(inventory_matrix)} ‰∏™Â∫óÈì∫"
                    )
                    st.rerun()
                else:
                    st.error("Â∫ìÂ≠òÊü•ËØ¢Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•ÊàñÁ®çÂêéÈáçËØï")

    with col2:
        if st.session_state.inventory_matrix_queried and st.button("üîÑ ÈáçÊñ∞Êü•ËØ¢", key="matrix_requery", use_container_width=True):
            st.session_state.inventory_matrix_queried = False
            st.session_state.inventory_matrix_data = None
            st.session_state.query_stats = None
            st.session_state.stock_filter_matrix = "ÂÖ®ÈÉ®"
            st.session_state.region_filter_matrix = "ÂÖ®ÈÉ®"
            st.session_state.sort_option_matrix = "ÈªòËÆ§"
            st.rerun()

    st.write("")

    # ÊòæÁ§∫Êü•ËØ¢ÁªüËÆ°‰ø°ÊÅØÔºàÂ¶ÇÊûúÊü•ËØ¢Â∑≤ÂÆåÊàêÔºâ
    if st.session_state.inventory_matrix_queried and st.session_state.query_stats:
        query_stats = st.session_state.query_stats
        success_count = query_stats.get("success", 0)
        failed_count = query_stats.get("failed", 0)
        success_rate = query_stats.get("success_rate", 0)
        duration = query_stats.get("duration", 0)
        failed_details = query_stats.get("failed_details", [])
        
        # ÊòæÁ§∫ÁªüËÆ°‰ø°ÊÅØÂç°Áâá
        stats_col1, stats_col2, stats_col3, stats_col4 = st.columns(4)
        with stats_col1:
            st.metric("‚úÖ ÊàêÂäü", f"{success_count}‰∏™")
        with stats_col2:
            st.metric("‚ùå Â§±Ë¥•", f"{failed_count}‰∏™")
        with stats_col3:
            st.metric("üìä ÊàêÂäüÁéá", f"{success_rate}%")
        with stats_col4:
            st.metric("‚è±Ô∏è ËÄóÊó∂", f"{duration}Áßí")
        
        # Â¶ÇÊûúÊúâÂ§±Ë¥•ÁöÑ‰∫ßÂìÅÔºåÊòæÁ§∫Â§±Ë¥•ËØ¶ÊÉÖ
        if failed_details:
            with st.expander("üìã Êü•ÁúãÂ§±Ë¥•‰∫ßÂìÅËØ¶ÊÉÖ"):
                for product_id, reason in failed_details:
                    st.write(f"‚Ä¢ ‰∫ßÂìÅ {product_id}: {reason}")

    # ÊòæÁ§∫Â∫ìÂ≠òÁü©ÈòµÔºàÂü∫‰∫ésession_stateÂà§Êñ≠Ôºâ
    if st.session_state.inventory_matrix_queried and st.session_state.inventory_matrix_data:
        st.info("üìä ÂΩìÂâçÊòæÁ§∫ÊâÄÊúâÊî∂Ëóè‰∫ßÂìÅÁöÑÂ∫ìÂ≠òÁü©Èòµ")

        # Ëé∑ÂèñÁºìÂ≠òÁöÑÂ∫ìÂ≠òÁü©Èòµ
        inventory_matrix = st.session_state.inventory_matrix_data

        if inventory_matrix:
            # ‰ΩøÁî®Êñ∞ÁöÑÁªüËÆ°ÂáΩÊï∞
            stats = calculate_enhanced_inventory_stats(inventory_matrix)

            # ÊòæÁ§∫ÂÆûÊó∂Â∫ìÂ≠òÁä∂ÊÄÅÂàÜÂ∏É
            st.subheader("üìä Â∫ìÂ≠òÁä∂ÊÄÅÂàÜÂ∏É")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("‚úÖ È´òÂ∫ìÂ≠òÂ∫óÈì∫",
                          f"{stats['stock_status']['È´òÂ∫ìÂ≠òÂ∫óÈì∫']['count']}ÂÆ∂",
                          f"{stats['stock_status']['È´òÂ∫ìÂ≠òÂ∫óÈì∫']['percentage']}%")
            with col2:
                st.metric("‚ö†Ô∏è ‰ΩéÂ∫ìÂ≠òÂ∫óÈì∫",
                          f"{stats['stock_status']['‰ΩéÂ∫ìÂ≠òÂ∫óÈì∫']['count']}ÂÆ∂",
                          f"{stats['stock_status']['‰ΩéÂ∫ìÂ≠òÂ∫óÈì∫']['percentage']}%")
            with col3:
                st.metric("‚ùå Êó†Â∫ìÂ≠òÂ∫óÈì∫",
                          f"{stats['stock_status']['Êó†Â∫ìÂ≠òÂ∫óÈì∫']['count']}ÂÆ∂",
                          f"{stats['stock_status']['Êó†Â∫ìÂ≠òÂ∫óÈì∫']['percentage']}%")

            # ÊòæÁ§∫Âå∫ÂüüÂ∫ìÂ≠òÁÉ≠ÂäõÂõæ
            st.subheader("üó∫Ô∏è Âå∫ÂüüÂ∫ìÂ≠òÂàÜÂ∏É")
            for region, data in stats['region_heatmap'].items():
                st.write(f"**{region}**: {data['count']}ÂÆ∂Â∫óÈì∫ ({data['percentage']}%) - {data['inventory']}‰ª∂Â∫ìÂ≠ò")

            # ÂÖàÊòæÁ§∫ÈáçÁÇπÂÖ≥Ê≥®Â∫óÈì∫ÂàÜÊûê
            st.subheader("üè™üè™ ÂÖ≥Ê≥®Â∫óÈì∫Â∫ìÂ≠òÂàÜÊûê")

            # Ëé∑ÂèñÁî®Êà∑ÂÖ≥Ê≥®ÁöÑÂ∫óÈì∫ÂàóË°®
            followed_stores = get_followed_store_names()
            
            # Â¶ÇÊûúÁî®Êà∑Ê≤°ÊúâÂÖ≥Ê≥®‰ªª‰ΩïÂ∫óÈì∫ÔºåÊèêÁ§∫Áî®Êà∑
            if not followed_stores:
                st.info("üí° ÊèêÁ§∫ÔºöÂú®\"ÂÖ≥Ê≥®Â∫óÈì∫\"Ê†áÁ≠æÈ°µ‰∏≠Ê∑ªÂä†ÂÖ≥Ê≥®Â∫óÈì∫Ôºå‰ª•Âú®Ê≠§ÊòæÁ§∫Â∫ìÂ≠òÂàÜÊûê")
                # ‰ΩøÁî®ÈªòËÆ§ÁöÑÈáçÁÇπÂÖ≥Ê≥®Â∫óÈì∫ËøõË°åÂàÜÊûê
                key_store_analysis = calculate_key_store_analysis(favorites, inventory_matrix)
            else:
                # ‰ΩøÁî®Áî®Êà∑ÂÖ≥Ê≥®ÁöÑÂ∫óÈì∫ËøõË°åÂàÜÊûê
                key_store_analysis = calculate_key_store_analysis(favorites, inventory_matrix, key_stores=followed_stores)

            # ÊòæÁ§∫ÊØè‰∏™ÈáçÁÇπÂÖ≥Ê≥®Â∫óÈì∫ÁöÑÂ∫ìÂ≠òÊÉÖÂÜµ
            for store_name, products in key_store_analysis.items():
                if products:
                    # ÂàõÂª∫‰∏§ÂàóÂ∏ÉÂ±ÄÔºöÂ∫óÈì∫ÂêçÁß∞Âú®Â∑¶ÔºåÂ∫ìÂ≠òËØ¶ÊÉÖÂú®Âè≥ÔºàÂèØÊäòÂè†Ôºâ
                    col1, col2 = st.columns([1, 3])

                    with col1:
                        # Â∫óÈì∫ÂêçÁß∞ÂßãÁªàÊòæÁ§∫Ôºà‰∏çÊäòÂè†Ôºâ
                        st.write(f"**{store_name}**")

                    with col2:
                        # Â∫ìÂ≠òËØ¶ÊÉÖÂèØÊäòÂè†
                        with st.expander(f"Êü•ÁúãÂ∫ìÂ≠òËØ¶ÊÉÖ", expanded=False):
                            # ÊòæÁ§∫ÊâÄÊúâ‰∫ßÂìÅÁöÑÂ∫ìÂ≠òÁä∂ÊÄÅ
                            for product in products:
                                st.write(f"‚Ä¢ {product['display_text']}")
                                
                                # Âè™ÊúâÊúâÂ∫ìÂ≠òÁöÑ‰∫ßÂìÅÊâçËÉΩÂä†ÂÖ•Ë¥≠‰π∞ËÆ°Âàí
                                if product['stock_count'] > 0:
                                    # ‰ªéproduct_key‰∏≠Ëß£Êûêproduct_model„ÄÅcolor„ÄÅsize
                                    product_key_parts = product['product_key'].rsplit(' ', 2)
                                    if len(product_key_parts) == 3:
                                        product_model, color, size = product_key_parts
                                        
                                        # ‰ªéfavorites‰∏≠Êü•ÊâæÂØπÂ∫îÁöÑfavoriteÂØπË±°
                                        favorite = None
                                        for fav in favorites:
                                            if (fav['product_model'] == product_model and 
                                                fav['color'] == color and 
                                                fav['size'] == size):
                                                favorite = fav
                                                break
                                        
                                        if favorite:
                                            if st.button("Âä†ÂÖ•Ë¥≠‰π∞ËÆ°Âàí", key=f"add_plan_matrix_{store_name}_{product_model}_{color}_{size}"):
                                                # ÂáÜÂ§á‰∫ßÂìÅ‰ø°ÊÅØ
                                                product_info = {
                                                    "product_model": favorite['product_model'],
                                                    "exact_model": favorite.get('exact_model', ''),
                                                    "color": favorite['color'],
                                                    "size": favorite['size'],
                                                    "price_krw": int(favorite['price']),
                                                    "year_info": favorite.get('year_info', ''),
                                                    "domestic_price_cny": favorite.get('china_price_cny', None)
                                                }
                                                
                                                if add_to_plan(store_name, product_info):
                                                    st.success(f"‚úÖ Â∑≤Ê∑ªÂä†Âà∞ {store_name} ÁöÑË¥≠‰π∞ËÆ°Âàí")
                                                    st.rerun()
                                                else:
                                                    st.error(f"‚ùå Ê∑ªÂä†Âà∞ {store_name} ÁöÑË¥≠‰π∞ËÆ°ÂàíÂ§±Ë¥•")

                else:
                    # Â¶ÇÊûúÂ∫óÈì∫Ê≤°ÊúâÁõ∏ÂÖ≥‰∫ßÂìÅÊï∞ÊçÆ
                    col1, col2 = st.columns([1, 3])
                    with col1:
                        st.write(f"**{store_name}**")
                    with col2:
                        st.write("ËØ•Â∫óÈì∫Êó†Áõ∏ÂÖ≥‰∫ßÂìÅÂ∫ìÂ≠òÊï∞ÊçÆ")

                st.divider()

            st.subheader("üì¶üì¶ ‰∫ßÂìÅÂ∫ìÂ≠òÊ∑±Â∫¶ÂàÜÊûê")

            product_depth_stats = calculate_product_depth_stats(favorites, inventory_matrix)

            for product_key, stats in product_depth_stats.items():
                with st.expander(f"{product_key} Â∫ìÂ≠òÂàÜÊûê"):
                    # Âü∫Á°ÄÁªüËÆ°
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("üì¶ ÊÄªÂ∫ìÂ≠ò", f"{stats['total_inventory']}‰ª∂")
                    with col2:
                        st.metric("üè™ ÊúâÂ∫ìÂ≠òÂ∫óÈì∫", f"{stats['stores_with_stock']}ÂÆ∂")

                    # ËØ¶ÁªÜÂå∫ÂüüÂàÜÂ∏É
                    st.write("üìç Âå∫ÂüüÂàÜÂ∏É:")
                    for region, region_data in stats['region_distribution'].items():
                        if region_data['total'] > 0:
                            # ÊòæÁ§∫Âå∫ÂüüÊ±áÊÄª
                            st.write(f"**{region}**: {region_data['total']}‰ª∂")

                            # ÊòæÁ§∫ÂÖ∑‰ΩìÂ∫óÈì∫ÂàÜÂ∏ÉÔºàÁº©ËøõÊòæÁ§∫Ôºâ
                            for store_info in region_data['stores']:
                                st.write(f"  - {store_info['store_name']}: {store_info['stock']}‰ª∂")

            # Á≠õÈÄâÂå∫Âüü
            st.subheader("Á≠õÈÄâÈÄâÈ°π")
            filter_col1, filter_col2, filter_col3, filter_col4 = st.columns([2, 2, 2, 1])

            with filter_col1:
                stock_filter = st.selectbox(
                    "Â∫ìÂ≠òÁä∂ÊÄÅ",
                    ["ÂÖ®ÈÉ®", "ÊúâÂ∫ìÂ≠ò", "Êó†Â∫ìÂ≠ò"],
                    index=["ÂÖ®ÈÉ®", "ÊúâÂ∫ìÂ≠ò", "Êó†Â∫ìÂ≠ò"].index(st.session_state.stock_filter_matrix),
                    key="stock_filter_matrix_select"
                )

            with filter_col2:
                region_filter = st.selectbox(
                    "Â∫óÈì∫Âå∫Âüü",
                    ["ÂÖ®ÈÉ®", "È¶ñÂ∞îÂüéÂå∫", "‰∫¨ÁïøÈÅìÂú∞Âå∫", "ÈáúÂ±±", "Â§ßÈÇ±"],
                    index=["ÂÖ®ÈÉ®", "È¶ñÂ∞îÂüéÂå∫", "‰∫¨ÁïøÈÅìÂú∞Âå∫", "ÈáúÂ±±", "Â§ßÈÇ±"].index(st.session_state.region_filter_matrix),
                    key="region_filter_matrix_select"
                )

            with filter_col3:
                sort_option = st.selectbox(
                    "ÊéíÂ∫èÊñπÂºè",
                    ["ÈªòËÆ§", "Â∫ìÂ≠òÊÄªÈáèÈôçÂ∫è", "Â∫ìÂ≠òÊÄªÈáèÂçáÂ∫è"],
                    index=["ÈªòËÆ§", "Â∫ìÂ≠òÊÄªÈáèÈôçÂ∫è", "Â∫ìÂ≠òÊÄªÈáèÂçáÂ∫è"].index(st.session_state.sort_option_matrix),
                    key="sort_option_matrix_select"
                )

            with filter_col4:
                st.write("")  # Á©∫Ë°åÁî®‰∫éÂØπÈΩê
                if st.button("‰∏ÄÈîÆÊ∏ÖÈô§Á≠õÈÄâ", key="clear_filters_matrix"):
                    st.session_state.stock_filter_matrix = "ÂÖ®ÈÉ®"
                    st.session_state.region_filter_matrix = "ÂÖ®ÈÉ®"
                    st.session_state.sort_option_matrix = "ÈªòËÆ§"
                    st.rerun()

            # Êõ¥Êñ∞sessionÁä∂ÊÄÅ
            st.session_state.stock_filter_matrix = stock_filter
            st.session_state.region_filter_matrix = region_filter
            st.session_state.sort_option_matrix = sort_option

            # Â∫îÁî®Á≠õÈÄâÂíåÊéíÂ∫è
            filtered_matrix = apply_filters_and_sort(
                inventory_matrix, stock_filter, region_filter, sort_option
            )

            if filtered_matrix:
                # ËΩ¨Êç¢‰∏∫DataFrameÊòæÁ§∫
                df = pd.DataFrame.from_dict(filtered_matrix, orient='index')

                # Ê∑ªÂä†Ë°®Ê†ºÊ†∑Âºè
                st.markdown("""
                <style>
                .dataframe {
                    font-size: 11px;
                }
                .dataframe th {
                    font-size: 11px;
                    white-space: nowrap;
                }
                .dataframe td {
                    font-size: 11px;
                    white-space: nowrap;
                }
                </style>
                """, unsafe_allow_html=True)

                st.dataframe(df, use_container_width=True, height=500)

                # Excel‰∏ãËΩΩÊåâÈíÆ - ËΩ¨Êç¢DataFrame‰∏∫JSONÂ≠óÁ¨¶‰∏≤‰ª•ÊîØÊåÅÁºìÂ≠ò
                import json
                df_dict = df.to_dict(orient='index')
                df_json_str = json.dumps(df_dict, default=str)
                excel_data = convert_to_excel(df_json_str)
                st.download_button(
                    label="‰∏ãËΩΩÂ∫ìÂ≠òÊï∞ÊçÆ(Excel)",
                    data=excel_data,
                    file_name="inventory_report.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
            else:
                st.warning("Ê≤°ÊúâÊâæÂà∞Á¨¶ÂêàÁ≠õÈÄâÊù°‰ª∂ÁöÑÂ∫óÈì∫")
        else:
            st.error("Êó†Ê≥ïÁîüÊàêÂ∫ìÂ≠òÁü©Èòµ")
